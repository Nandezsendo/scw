install.packages("geomorph")
data("larvalMorph")
library(geomorph)
data("larvalMorph")
data("larvalMorph")
larvalMorph
library("geomorph", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
data("larvalMorph")
library(geomorph)
intall(rgl)
install.packages("rgl")
library(geomorph)
library("rgl", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
detach("package:rgl", unload=TRUE)
library("rgl", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
library(geomorph)
library(geomorph)
data("larvalMorph")
Y.gpa <- gpagen(larvalMorph$tailcoords, curves = larvalMorph$tail.sliders,
ProcD = FALSE, print.progress = FALSE)
plot(Y.gpa)
View(Y.gpa)
gdf <- geomorph.data.frame(Y.gpa, treatment = larvalMorph$treatment,
family = larvalMorph$family)
fit.size <- procD.lm(coords ~ log(Csize),
data = gdf, print.progress = FALSE) # simple allometry model
fit.family<- procD.lm(coords ~ log(Csize) * family,
data = gdf, print.progress = FALSE) # unique family allometries
fit.treatment<- procD.lm(coords ~ log(Csize) * treatment/family,
data = gdf, print.progress = FALSE) # unique treatment: family allometries
fit.size
fit.family
fit.treatment
anova(fit.size)
anova(fit.family)
anova(fit.treatment)
anova(fit.size, fit.family, fit.treatment, print.progress = FALSE)
summary(fit.size)
plot(fit.size, type = "regression", reg.type = "PredLine", predictor = log(gdf$Csize))
plot(fit.size, type = "regression", reg.type = "RegScore", predictor = log(gdf$Csize))
plot(fit.size, type = "regression", reg.type = "PredLine", predictor = log(gdf$Csize))
plot(fit.size, type = "regression", reg.type = "RegScore", predictor = log(gdf$Csize))
plotAllometry(fit.size, size = gdf$Csize, logsz = TRUE, method = "PredLine")
plotAllometry(fit.size, size = gdf$Csize, logsz = TRUE, method = "RegScore")
PLS <- two.b.pls(log(gdf$Csize), gdf$coords, print.progress = FALSE)
PLS
plot(PLS)
plotAllometry(fit.size, size = gdf$Csize, logsz = TRUE, method = "CAC")
plotAllometry(fit.size, size = gdf$Csize, logsz = TRUE, method = "size.shape")
fit.unique <- procD.lm(coords ~ log(Csize) * treatment/family,
data = gdf, print.progress = FALSE) # unique
fit.common <- procD.lm(coords ~ log(Csize) + treatment/family,
data = gdf, print.progress = FALSE)
anova(fit.common, fit.unique, print.progress = FALSE)
plotAllometry(fit.common, size = gdf$Csize, logsz = TRUE, method = "PredLine",
pch = 19, col = as.numeric(gdf$treatment))
plotAllometry(fit.common, size = gdf$Csize, logsz = TRUE, method = "RegScore",
pch = 19, col = as.numeric(gdf$treatment))
anova(fit.common)
anova(fit.common, error = c("Residuals", "treatment:family", "Residuals"))
reveal.model.designs(fit.common)
fit.null <- procD.lm(coords ~ log(Csize) + family, data = gdf, print.progress = FALSE)
PW <- pairwise(fit.common, fit.null, groups = gdf$treatment, print.progress = FALSE)
PW
summary(PW, test.type = "dist", confidence = 0.95)
anova(fit.null, fit.common, print.progress = FALSE)
summary(PW, test.type = "dist", confidence = 0.95, stat.table = FALSE)
summary(PW, test.type = "var", confidence = 0.95)
morphol.disparity(fit.common, groups = gdf$treatment, print.progress = FALSE)
TA <- trajectory.analysis(fit.common,
groups = gdf$treatment, traj.pts = gdf$family,
pca = TRUE, print.progress = FALSE)
summary(TA, attribute = "MD")
TP <- plot(TA, pch = 19, cex = 0.7, col = as.numeric(gdf$treatment))
add.trajectories(TP, traj.bg = 1:nlevels(gdf$treatment),
start.bg = 1:nlevels(gdf$treatment),
end.bg = 1:nlevels(gdf$treatment))
TA <- trajectory.analysis(fit.common,
groups = gdf$treatment, traj.pts = gdf$family,
pca = TRUE, print.progress = FALSE)
summary(TA, attribute = "MD")
)
TA <- trajectory.analysis(fit.common,
groups = gdf$treatment, traj.pts = gdf$family,
pca = TRUE, print.progress = FALSE)
summary(TA, attribute = "MD")
TP <- plot(TA, pch = 19, cex = 0.7, col = as.numeric(gdf$treatment))
add.trajectories(TP, traj.bg = 1:nlevels(gdf$treatment),
start.bg = 1:nlevels(gdf$treatment),
end.bg = 1:nlevels(gdf$treatment))
library("rgl", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
library("jpeg", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
library("ape", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
install.packages("geiger")
install.packages("phytools")
help(array)
geomorph
library(geomorph)
install.packages("RRPP")
library(geomorph)
library(geomorph)
library(geomorph)
mydata <- readland.tps("ratland.tps", specID = "ID")
readland.tps(file, specID = c("None", "ID", "imageID"), readcurves = FALSE, warnmsg = T)
data(plethodon)
plethodon
class(plethodon$site)
class(plethodon$land)
class(plethodon$links)
mydata <- readland.tps("ratland.tps", specID = "ID")
View(plethodon)
data("ratland")
mydata <- readland.tps("ratland.tps", specID = "ID")
data("ratland")
ratland.tps(ratland.tps, specID = "ID"), readcurves = FALSE,warnmsg = T)
ratland.tps(ratland.tps, specID = "ID") readcurves = FALSE,warnmsg = T)
ratland.tps(ratland.tps, specID = "ID")
help("geomorph")
data(ratland.tps)
ratland
ratland.tps
readland.tps("ratland.tps", specID = "ID")
readland.tps("ratland", specID = "ID")
library(geomorph)
data("ratland")
ratland
readland.tps("ratland", specID = "ID")
readland.tps("ratland.tps", specID = "ID")
help(geomorph)
readland.tps(ratland.tps, specID =  "ID"), readcurves = FALSE, warnmsg = TRUE)
readland.tps(ratland.tps, specID =  "ID") readcurves = FALSE, warnmsg = TRUE)
readland.tps(ratland.tps, specID =  "ID")
readland.tps("ratland.tps", specID =  "ID")
readland.tps("ratland", specID =  "ID")
mydata[,,1]
ratland[,,1]
readland.nts("rats.nts")
library(geomorph)
library(RRPP)
library(rgl)
library(geomorph)
read.morphologika("morphologikaexample.txt")
data(plethodon)
plethodon
data(ratland)
ratland
readland.tps("ratland.tps", specID = "ID")
mydata <- readland.tps("ratland.tps", specID = "ID")
[1] "Not all specimens have scale. Using scale = 1.0"
wd
View(plethodon)
View(plethodon)
View(plethodon)
View(plethodon)
plethodon
ratland
mydata= readland.tps(ratland, specID = "ID")
mydata= readland.tps("ratland", specID = "ID")
data(plethodon)
plethodon
Y <- gpagen(plethodon$land)
Y
ShowPlot=T
View(Y)
View(Y)
$Csize
ShowPlot
View(Y)
data("plethodon")
data(hummingbirds)
hummingbirds$curvepts
Y <- gpagen(hummingbirds$land,curves=hummingbirds$curvepts)
Y
data(scallops)
scallops$curvslide
scallops$surfslide
Y <- gpagen(A=scallops$coorddata, curves=scallops$curvslide,
surfaces=scallops$surfslide)
Y
setwd("~/Desktop/SCW/Lesson2_IntroToR")
setwd("~/Desktop/SCW/Lesson2_IntroToR")
3+5
sqrt(64)
#My first R command
print("Good Morning")
#variable
names <- "jane"
print(price)
price <- 3.99
print(price)
ls
ls()
rm(price)
ls()
mass <- 47.5
age<- 122
mass<-mass*2.3
age<-age-20
height<-height+20
mass<- 64
sqrt(64)
res<-sqrt(mass)
res <- sqrt(mass)
print(res)
getwd()
hepl(print)
help(print)
?print
#install a package
installed.packages("knitr")
library(knitr)
score<- 79
typeof(score)
score<-79L
typeof(score)
score<-79
is.integer(score)
typeof(is.integer(score))
v<- c(4,5,6)
v<-c(1:3,45)
length(v)
str(v)
head(v,n=2)
tail(v,n=2)
#manipulate the vector
v<-c(v,56)
str(v)
m<-matrix(c(1:18),3,6)
m
dim(m)
cont<-factor(c("asia","europe","america","africa","oceania"))
str(cont)
l<-list("Afghanistan",1952,88787)
l<-list("Afghanistan",1952,88787)
print(l)
typeof(L)
typeof(l)
str(l)
menuitems<-c("chicken", "salad","soup","drink")
menucost<-c(4.99,2.99,3.29,1.89)
menucost<-c(4.99,2.99,3.29,1.89)
menuitems<-c("chicken", "salad","soup","drink")
menutypes<-("solid","liquid","solid","liquid")
menuitems<-c("chicken", "salad","soup","drink")
menutypes<-c("solid","liquid","solid","liquid")
menucost<-c(4.99,2.99,3.29,1.89)
myorder<-list(menuitems,menutypes,menucost)
print(myorder)
myorder_df<-data.frame(menutypes,menutypes,menucost)
print(myorder_df)
v<- c(2:10)
v[3]
v[c(3:6)]
v[-c(3:6)]
myorder[1]
myorder_df[1:3,]
myorder_df
myorder_df$menutypes.1
x<-myorder_df$menutypes.1
x
v<-c(1,5,3,4,5)
v1<-v[v==5]
v1
v==5
df1<-myorder_df[myorder_df$menutypes=="solid"]
df1
df1<-myorder_df[myorder_df$menutypes=="solid", ]
df1
df1<-myorder_df[myorder_df$menucost>3, ]
df1<-myorder_df[myorder_df$menutypes=="solid", ]
df2<-myorder_df[myorder_df$menucost>3, ]
df2
read.table("gapmainder.txt", header = TRUE)
read.table("gapmainder.txt", header = TRUE)
read.table("gapmainder.txt", header = TRUE)
read.table("gapminder.txt", header = TRUE)
data<-read.table("gapminder.txt", header = TRUE)
head(data)
str(data)
typeof(data)
x1<-data[,c(3,5)]
head(x1)
data[data$country=="Sweden",]
unique(data[,1])
head(data)
View(data)
data[data$lifeExp<70,]
x2<-data[data$lifeExp<70,]
head(x2)
mydataFull <- read.table(read.table("gapminder.txt", header = TRUE))
mydataFull <- read.table("gapminder.txt", header = TRUE)
Canada<- mydataFull[mydataFull$country=="Canada",]
plot(Canada$year, Canada$lifeExp)
plot(Canada$year, Canada$lifeExp, type= "l")
plot(Canada$year, Canada$lifeExp, type= "l", col="blue")
source("Life_expectancy.R")
#plot lif exp
png("Canada.png") #opening a png device to write plot to
plot(Canada$year, Canada$lifeExp, type= "l", col="blue")
dev.off() #closes the device
